// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250821055244_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "admin",
                            Role = "User",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("InvoiceItem", b =>
                {
                    b.Property<int>("InvoiceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceItemId"));

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceItemId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerItem")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Description = "Intel Core i5 CPU",
                            Name = "CPU Intel i5",
                            PricePerItem = 25000m,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 2,
                            Description = "AMD Ryzen 5 CPU",
                            Name = "CPU AMD Ryzen 5",
                            PricePerItem = 23000m,
                            Quantity = 15
                        },
                        new
                        {
                            ProductId = 3,
                            Description = "ASUS Motherboard",
                            Name = "Motherboard ASUS",
                            PricePerItem = 18000m,
                            Quantity = 8
                        },
                        new
                        {
                            ProductId = 4,
                            Description = "8GB DDR4 RAM",
                            Name = "RAM 8GB DDR4",
                            PricePerItem = 8000m,
                            Quantity = 20
                        },
                        new
                        {
                            ProductId = 5,
                            Description = "512GB Solid State Drive",
                            Name = "SSD 512GB",
                            PricePerItem = 12000m,
                            Quantity = 12
                        },
                        new
                        {
                            ProductId = 6,
                            Description = "NVIDIA RTX 3060 Graphics Card",
                            Name = "GPU NVIDIA RTX 3060",
                            PricePerItem = 45000m,
                            Quantity = 5
                        },
                        new
                        {
                            ProductId = 7,
                            Description = "600W PSU",
                            Name = "Power Supply 600W",
                            PricePerItem = 7000m,
                            Quantity = 25
                        },
                        new
                        {
                            ProductId = 8,
                            Description = "ATX PC Cabinet",
                            Name = "Cabinet ATX",
                            PricePerItem = 5000m,
                            Quantity = 30
                        },
                        new
                        {
                            ProductId = 9,
                            Description = "24-inch Monitor",
                            Name = "Monitor 24inch",
                            PricePerItem = 15000m,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 10,
                            Description = "Mechanical Keyboard",
                            Name = "Keyboard Mechanical",
                            PricePerItem = 3500m,
                            Quantity = 18
                        });
                });

            modelBuilder.Entity("InvoiceItem", b =>
                {
                    b.HasOne("Invoice", null)
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Invoice", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
